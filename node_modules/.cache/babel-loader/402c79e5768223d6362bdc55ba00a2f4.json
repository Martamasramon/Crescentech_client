{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/martamasramon/Documents/GitHub/Crescentech_client/src/Views/Tests/Tests.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TestItem from './TestItem';\nimport MyMap from './Map';\nimport { connect } from 'react-redux';\nimport { getTests } from '../../actions/test';\nimport './tests.css'; // TO-DO\n// Get location from phone as lat vs lng\n\nconst Tests = ({\n  getTests,\n  test: {\n    tests,\n    loading\n  }\n}) => {\n  _s();\n\n  useEffect(() => {\n    getTests();\n  }, [getTests]);\n  const testLocations = [];\n  let lat = 0;\n  let lng = 0;\n  let count = 0;\n  tests.forEach(test => {\n    let testColour = \"White\";\n    if (test.result === \"Positive\") testColour = \"Green\";else if (test.result === \"Negative\") testColour = \"Red\";\n    testLocations.push({\n      colour: testColour,\n      coordinates: {\n        lat: test.lat,\n        lng: test.lng\n      }\n    });\n    lat = lat + test.lat;\n    lng = lng + test.lng;\n    count = count + 1;\n  });\n  const center = {\n    lat: lat / count,\n    lng: lng / count\n  }; // Change h1 to spinner\n\n  return loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 22\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"tests-title\",\n      children: \"Test Result History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MyMap, {\n      center: center,\n      locs: testLocations,\n      zoomLevel: 18\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), tests.map(test => /*#__PURE__*/_jsxDEV(TestItem, {\n      test: test\n    }, test._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Tests, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Tests;\nTests.propTypes = {\n  getTests: PropTypes.func.isRequired,\n  test: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  test: state.test\n});\n\nexport default connect(mapStateToProps, {\n  getTests\n})(Tests);\n\nvar _c;\n\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"sources":["/Users/martamasramon/Documents/GitHub/Crescentech_client/src/Views/Tests/Tests.js"],"names":["React","useEffect","PropTypes","TestItem","MyMap","connect","getTests","Tests","test","tests","loading","testLocations","lat","lng","count","forEach","testColour","result","push","colour","coordinates","center","map","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,aAAP,C,CAEA;AACA;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAED,EAAAA,QAAF;AAAYE,EAAAA,IAAI,EAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAjB,CAAD,KAAyC;AAAA;;AACrDT,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIA,QAAMK,aAAa,GAAG,EAAtB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,KAAK,GAAG,CAAZ;AAEAL,EAAAA,KAAK,CAACM,OAAN,CAAeP,IAAD,IAAU;AACtB,QAAIQ,UAAU,GAAG,OAAjB;AACA,QAAIR,IAAI,CAACS,MAAL,KAAgB,UAApB,EAAgCD,UAAU,GAAG,OAAb,CAAhC,KACK,IAAIR,IAAI,CAACS,MAAL,KAAgB,UAApB,EAAgCD,UAAU,GAAG,KAAb;AAErCL,IAAAA,aAAa,CAACO,IAAd,CAAmB;AACjBC,MAAAA,MAAM,EAAEH,UADS;AAEjBI,MAAAA,WAAW,EAAE;AACXR,QAAAA,GAAG,EAAEJ,IAAI,CAACI,GADC;AAEXC,QAAAA,GAAG,EAAEL,IAAI,CAACK;AAFC;AAFI,KAAnB;AAQAD,IAAAA,GAAG,GAAGA,GAAG,GAAGJ,IAAI,CAACI,GAAjB;AACAC,IAAAA,GAAG,GAAGA,GAAG,GAAGL,IAAI,CAACK,GAAjB;AACAC,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACD,GAhBD;AAkBA,QAAMO,MAAM,GAAG;AACbT,IAAAA,GAAG,EAAEA,GAAG,GAACE,KADI;AAEbD,IAAAA,GAAG,EAAEA,GAAG,GAACC;AAFI,GAAf,CA5BqD,CAiCrD;;AACA,SAAQJ,OAAO,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAJ,gBACX;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEW,MAAf;AAAuB,MAAA,IAAI,EAAEV,aAA7B;AAA4C,MAAA,SAAS,EAAE;AAAvD;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGF,KAAK,CAACa,GAAN,CAAWd,IAAD,iBAAa,QAAC,QAAD;AAAyB,MAAA,IAAI,EAAEA;AAA/B,OAAeA,IAAI,CAACe,GAApB;AAAA;AAAA;AAAA;AAAA,YAAvB,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOD,CAzCD;;GAAMhB,K;;KAAAA,K;AA2CNA,KAAK,CAACiB,SAAN,GAAkB;AAChBlB,EAAAA,QAAQ,EAAEJ,SAAS,CAACuB,IAAV,CAAeC,UADT;AAEhBlB,EAAAA,IAAI,EAAEN,SAAS,CAACyB,MAAV,CAAiBD;AAFP,CAAlB;;AAKA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCrB,EAAAA,IAAI,EAAEqB,KAAK,CAACrB;AADsB,CAAZ,CAAxB;;AAIA,eAAeH,OAAO,CAACuB,eAAD,EAAkB;AAAEtB,EAAAA;AAAF,CAAlB,CAAP,CAAuCC,KAAvC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TestItem from './TestItem';\nimport MyMap from './Map';\nimport { connect } from 'react-redux';\nimport { getTests } from '../../actions/test';\nimport './tests.css';\n\n// TO-DO\n// Get location from phone as lat vs lng\n\nconst Tests = ({ getTests, test:{tests, loading} }) => {\n  useEffect(() => {\n    getTests();\n  }, [getTests]);\n\n  const testLocations = [];\n  let lat = 0;\n  let lng = 0;\n  let count = 0;\n\n  tests.forEach((test) => {\n    let testColour = \"White\";\n    if (test.result === \"Positive\") testColour = \"Green\";\n    else if (test.result === \"Negative\") testColour = \"Red\";\n\n    testLocations.push({\n      colour: testColour,\n      coordinates: {\n        lat: test.lat,\n        lng: test.lng\n      }\n    });\n\n    lat = lat + test.lat;\n    lng = lng + test.lng;\n    count = count + 1;\n  });\n\n  const center = {\n    lat: lat/count,\n    lng: lng/count,\n  }\n\n  // Change h1 to spinner\n  return (loading ? (<h1>Loading</h1>) : (\n      <div className=\"tests\">\n        <h1 className=\"tests-title\">Test Result History</h1>\n        <MyMap center={center} locs={testLocations} zoomLevel={18} />\n        {tests.map((test) => (  <TestItem key={test._id} test={test} /> ))}\n      </div>\n  ));\n};\n\nTests.propTypes = {\n  getTests: PropTypes.func.isRequired,\n  test: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  test: state.test\n});\n\nexport default connect(mapStateToProps, { getTests })(Tests);\n"]},"metadata":{},"sourceType":"module"}